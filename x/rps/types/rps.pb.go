// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lb/rps/v1/rps.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters of the module.
type Params struct {
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d448aa83799f484, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// Game defines the Rock, Paper & Scissors game object
type Game struct {
	GameNumber   uint64   `protobuf:"varint,1,opt,name=game_number,json=gameNumber,proto3" json:"game_number,omitempty"`
	PlayerA      string   `protobuf:"bytes,2,opt,name=player_a,json=playerA,proto3" json:"player_a,omitempty"`
	PlayerB      string   `protobuf:"bytes,3,opt,name=player_b,json=playerB,proto3" json:"player_b,omitempty"`
	Status       string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Rounds       uint64   `protobuf:"varint,5,opt,name=rounds,proto3" json:"rounds,omitempty"`
	PlayerAMoves []string `protobuf:"bytes,6,rep,name=player_a_moves,json=playerAMoves,proto3" json:"player_a_moves,omitempty"`
	PlayerBMoves []string `protobuf:"bytes,7,rep,name=player_b_moves,json=playerBMoves,proto3" json:"player_b_moves,omitempty"`
	Score        []uint64 `protobuf:"varint,8,rep,packed,name=score,proto3" json:"score,omitempty"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}
func (*Game) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d448aa83799f484, []int{1}
}
func (m *Game) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Game) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Game.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Game) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Game.Merge(m, src)
}
func (m *Game) XXX_Size() int {
	return m.Size()
}
func (m *Game) XXX_DiscardUnknown() {
	xxx_messageInfo_Game.DiscardUnknown(m)
}

var xxx_messageInfo_Game proto.InternalMessageInfo

func (m *Game) GetGameNumber() uint64 {
	if m != nil {
		return m.GameNumber
	}
	return 0
}

func (m *Game) GetPlayerA() string {
	if m != nil {
		return m.PlayerA
	}
	return ""
}

func (m *Game) GetPlayerB() string {
	if m != nil {
		return m.PlayerB
	}
	return ""
}

func (m *Game) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Game) GetRounds() uint64 {
	if m != nil {
		return m.Rounds
	}
	return 0
}

func (m *Game) GetPlayerAMoves() []string {
	if m != nil {
		return m.PlayerAMoves
	}
	return nil
}

func (m *Game) GetPlayerBMoves() []string {
	if m != nil {
		return m.PlayerBMoves
	}
	return nil
}

func (m *Game) GetScore() []uint64 {
	if m != nil {
		return m.Score
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "lb.rps.v1.Params")
	proto.RegisterType((*Game)(nil), "lb.rps.v1.Game")
}

func init() { proto.RegisterFile("lb/rps/v1/rps.proto", fileDescriptor_5d448aa83799f484) }

var fileDescriptor_5d448aa83799f484 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x31, 0x4e, 0xf3, 0x30,
	0x18, 0x86, 0x9b, 0x36, 0x4d, 0x5b, 0xff, 0xbf, 0x18, 0x42, 0x85, 0x0c, 0x83, 0x89, 0xaa, 0x0e,
	0x59, 0x68, 0xa8, 0xba, 0x23, 0x35, 0x0b, 0x13, 0x08, 0x85, 0x8d, 0x25, 0xb2, 0x53, 0xab, 0xad,
	0x54, 0xc7, 0x91, 0x3f, 0xa7, 0x6a, 0x6f, 0xc1, 0x1d, 0xb8, 0x02, 0x87, 0x60, 0xac, 0x98, 0x18,
	0x51, 0x7b, 0x11, 0xe4, 0x38, 0x48, 0x19, 0x99, 0xac, 0xe7, 0xf5, 0xf3, 0x59, 0xaf, 0xfc, 0xa1,
	0xf3, 0x0d, 0x8b, 0x54, 0x01, 0xd1, 0x76, 0x6a, 0x8e, 0x49, 0xa1, 0xa4, 0x96, 0xfe, 0x60, 0xc3,
	0x26, 0x86, 0xb6, 0xd3, 0xab, 0xcb, 0x4c, 0x82, 0x90, 0x90, 0x56, 0x17, 0x91, 0x05, 0x6b, 0x8d,
	0xfa, 0xc8, 0x7b, 0xa2, 0x8a, 0x0a, 0x18, 0xbd, 0xb5, 0x91, 0x7b, 0x4f, 0x05, 0xf7, 0xaf, 0xd1,
	0xbf, 0x25, 0x15, 0x3c, 0xcd, 0x4b, 0xc1, 0xb8, 0xc2, 0x4e, 0xe0, 0x84, 0x6e, 0x82, 0x4c, 0xf4,
	0x58, 0x25, 0xfe, 0x0c, 0xf5, 0x8b, 0x0d, 0xdd, 0x73, 0x95, 0x52, 0xdc, 0x0e, 0x9c, 0x70, 0x10,
	0xe3, 0xcf, 0xf7, 0x9b, 0x61, 0xfd, 0xee, 0x7c, 0xb1, 0x50, 0x1c, 0xe0, 0x59, 0xab, 0x75, 0xbe,
	0x4c, 0x7a, 0xd6, 0x9c, 0x37, 0x86, 0x18, 0xee, 0xfc, 0x6d, 0x28, 0xf6, 0x2f, 0x90, 0x07, 0x9a,
	0xea, 0x12, 0xb0, 0x6b, 0x46, 0x92, 0x9a, 0x4c, 0xae, 0x64, 0x99, 0x2f, 0x00, 0x77, 0xab, 0x76,
	0x35, 0xf9, 0x63, 0x74, 0xf6, 0xdb, 0x2c, 0x15, 0x72, 0xcb, 0x01, 0x7b, 0x41, 0x27, 0x1c, 0x24,
	0xff, 0xeb, 0x16, 0x0f, 0x26, 0x6b, 0x58, 0xac, 0xb6, 0x7a, 0x4d, 0x2b, 0xb6, 0xd6, 0x10, 0x75,
	0x21, 0x93, 0x8a, 0xe3, 0x7e, 0xd0, 0x09, 0xdd, 0xc4, 0x42, 0x7c, 0xf7, 0x71, 0x24, 0xce, 0xe1,
	0x48, 0x9c, 0xef, 0x23, 0x71, 0x5e, 0x4f, 0xa4, 0x75, 0x38, 0x91, 0xd6, 0xd7, 0x89, 0xb4, 0x5e,
	0xc6, 0xcb, 0xb5, 0x5e, 0x95, 0x6c, 0x92, 0x49, 0x11, 0xdd, 0xee, 0xec, 0x46, 0xb2, 0x15, 0x5d,
	0xe7, 0xd1, 0xae, 0x5a, 0x8e, 0xde, 0x17, 0x1c, 0x98, 0x57, 0x7d, 0xfb, 0xec, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x56, 0xa5, 0x0a, 0x04, 0xb3, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Game) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Game) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Game) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Score) > 0 {
		dAtA2 := make([]byte, len(m.Score)*10)
		var j1 int
		for _, num := range m.Score {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintRps(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PlayerBMoves) > 0 {
		for iNdEx := len(m.PlayerBMoves) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PlayerBMoves[iNdEx])
			copy(dAtA[i:], m.PlayerBMoves[iNdEx])
			i = encodeVarintRps(dAtA, i, uint64(len(m.PlayerBMoves[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.PlayerAMoves) > 0 {
		for iNdEx := len(m.PlayerAMoves) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PlayerAMoves[iNdEx])
			copy(dAtA[i:], m.PlayerAMoves[iNdEx])
			i = encodeVarintRps(dAtA, i, uint64(len(m.PlayerAMoves[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Rounds != 0 {
		i = encodeVarintRps(dAtA, i, uint64(m.Rounds))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintRps(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PlayerB) > 0 {
		i -= len(m.PlayerB)
		copy(dAtA[i:], m.PlayerB)
		i = encodeVarintRps(dAtA, i, uint64(len(m.PlayerB)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PlayerA) > 0 {
		i -= len(m.PlayerA)
		copy(dAtA[i:], m.PlayerA)
		i = encodeVarintRps(dAtA, i, uint64(len(m.PlayerA)))
		i--
		dAtA[i] = 0x12
	}
	if m.GameNumber != 0 {
		i = encodeVarintRps(dAtA, i, uint64(m.GameNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRps(dAtA []byte, offset int, v uint64) int {
	offset -= sovRps(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Game) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameNumber != 0 {
		n += 1 + sovRps(uint64(m.GameNumber))
	}
	l = len(m.PlayerA)
	if l > 0 {
		n += 1 + l + sovRps(uint64(l))
	}
	l = len(m.PlayerB)
	if l > 0 {
		n += 1 + l + sovRps(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovRps(uint64(l))
	}
	if m.Rounds != 0 {
		n += 1 + sovRps(uint64(m.Rounds))
	}
	if len(m.PlayerAMoves) > 0 {
		for _, s := range m.PlayerAMoves {
			l = len(s)
			n += 1 + l + sovRps(uint64(l))
		}
	}
	if len(m.PlayerBMoves) > 0 {
		for _, s := range m.PlayerBMoves {
			l = len(s)
			n += 1 + l + sovRps(uint64(l))
		}
	}
	if len(m.Score) > 0 {
		l = 0
		for _, e := range m.Score {
			l += sovRps(uint64(e))
		}
		n += 1 + sovRps(uint64(l)) + l
	}
	return n
}

func sovRps(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRps(x uint64) (n int) {
	return sovRps(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Game) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Game: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Game: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameNumber", wireType)
			}
			m.GameNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rounds", wireType)
			}
			m.Rounds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rounds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAMoves", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerAMoves = append(m.PlayerAMoves, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerBMoves", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerBMoves = append(m.PlayerBMoves, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRps
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Score = append(m.Score, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRps
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRps
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRps
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Score) == 0 {
					m.Score = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRps
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Score = append(m.Score, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRps(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRps
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRps
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRps
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRps
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRps
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRps
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRps        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRps          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRps = fmt.Errorf("proto: unexpected end of group")
)
