// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v3.6.1
// source: lb/rps/v1/tx.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params } from "./rps";

export const protobufPackage = "lb.rps.v1";

/** MsgCreateGame defines the MsgCreateGame request type */
export interface MsgCreateGame {
  creator: string;
  oponent: string;
  rounds: Long;
}

/** MsgCreateGameResponse defines the MsgCreateGame response type */
export interface MsgCreateGameResponse {
}

/** MsgMakeMove defines the Msg/MakeMove request type. */
export interface MsgMakeMove {
  /** player is the message sender. */
  player: string;
  gameIndex: Long;
  move: string;
}

/** MsgMakeMoveResponse defines the Msg/MakeMove response type. */
export interface MsgMakeMoveResponse {
}

/** MsgRevealMove defines the Msg/RevealMove request type. */
export interface MsgRevealMove {
  /** player is the message sender. */
  player: string;
  gameIndex: Long;
  revealedMove: string;
  salt: string;
}

/** MsgRevealMoveResponse defines the Msg/RevealMove response type. */
export interface MsgRevealMoveResponse {
}

/** MsgUpdateParams defines the Msg/Update params request type */
export interface MsgUpdateParams {
  authority: string;
  params?: Params | undefined;
}

/** MsgUpdateParamsResponse defines the MsgUpdateParmas response type */
export interface MsgUpdateParamsResponse {
}

function createBaseMsgCreateGame(): MsgCreateGame {
  return { creator: "", oponent: "", rounds: Long.UZERO };
}

export const MsgCreateGame = {
  encode(message: MsgCreateGame, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.oponent !== "") {
      writer.uint32(18).string(message.oponent);
    }
    if (!message.rounds.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.rounds);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateGame {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.oponent = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.rounds = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateGame {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      oponent: isSet(object.oponent) ? globalThis.String(object.oponent) : "",
      rounds: isSet(object.rounds) ? Long.fromValue(object.rounds) : Long.UZERO,
    };
  },

  toJSON(message: MsgCreateGame): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.oponent !== "") {
      obj.oponent = message.oponent;
    }
    if (!message.rounds.equals(Long.UZERO)) {
      obj.rounds = (message.rounds || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateGame>, I>>(base?: I): MsgCreateGame {
    return MsgCreateGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateGame>, I>>(object: I): MsgCreateGame {
    const message = createBaseMsgCreateGame();
    message.creator = object.creator ?? "";
    message.oponent = object.oponent ?? "";
    message.rounds = (object.rounds !== undefined && object.rounds !== null)
      ? Long.fromValue(object.rounds)
      : Long.UZERO;
    return message;
  },
};

function createBaseMsgCreateGameResponse(): MsgCreateGameResponse {
  return {};
}

export const MsgCreateGameResponse = {
  encode(_: MsgCreateGameResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateGameResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateGameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateGameResponse {
    return {};
  },

  toJSON(_: MsgCreateGameResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateGameResponse>, I>>(base?: I): MsgCreateGameResponse {
    return MsgCreateGameResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateGameResponse>, I>>(_: I): MsgCreateGameResponse {
    const message = createBaseMsgCreateGameResponse();
    return message;
  },
};

function createBaseMsgMakeMove(): MsgMakeMove {
  return { player: "", gameIndex: Long.UZERO, move: "" };
}

export const MsgMakeMove = {
  encode(message: MsgMakeMove, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.player !== "") {
      writer.uint32(10).string(message.player);
    }
    if (!message.gameIndex.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.gameIndex);
    }
    if (message.move !== "") {
      writer.uint32(26).string(message.move);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgMakeMove {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgMakeMove();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.player = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.gameIndex = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.move = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgMakeMove {
    return {
      player: isSet(object.player) ? globalThis.String(object.player) : "",
      gameIndex: isSet(object.gameIndex) ? Long.fromValue(object.gameIndex) : Long.UZERO,
      move: isSet(object.move) ? globalThis.String(object.move) : "",
    };
  },

  toJSON(message: MsgMakeMove): unknown {
    const obj: any = {};
    if (message.player !== "") {
      obj.player = message.player;
    }
    if (!message.gameIndex.equals(Long.UZERO)) {
      obj.gameIndex = (message.gameIndex || Long.UZERO).toString();
    }
    if (message.move !== "") {
      obj.move = message.move;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgMakeMove>, I>>(base?: I): MsgMakeMove {
    return MsgMakeMove.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgMakeMove>, I>>(object: I): MsgMakeMove {
    const message = createBaseMsgMakeMove();
    message.player = object.player ?? "";
    message.gameIndex = (object.gameIndex !== undefined && object.gameIndex !== null)
      ? Long.fromValue(object.gameIndex)
      : Long.UZERO;
    message.move = object.move ?? "";
    return message;
  },
};

function createBaseMsgMakeMoveResponse(): MsgMakeMoveResponse {
  return {};
}

export const MsgMakeMoveResponse = {
  encode(_: MsgMakeMoveResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgMakeMoveResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgMakeMoveResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgMakeMoveResponse {
    return {};
  },

  toJSON(_: MsgMakeMoveResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgMakeMoveResponse>, I>>(base?: I): MsgMakeMoveResponse {
    return MsgMakeMoveResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgMakeMoveResponse>, I>>(_: I): MsgMakeMoveResponse {
    const message = createBaseMsgMakeMoveResponse();
    return message;
  },
};

function createBaseMsgRevealMove(): MsgRevealMove {
  return { player: "", gameIndex: Long.UZERO, revealedMove: "", salt: "" };
}

export const MsgRevealMove = {
  encode(message: MsgRevealMove, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.player !== "") {
      writer.uint32(10).string(message.player);
    }
    if (!message.gameIndex.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.gameIndex);
    }
    if (message.revealedMove !== "") {
      writer.uint32(26).string(message.revealedMove);
    }
    if (message.salt !== "") {
      writer.uint32(34).string(message.salt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRevealMove {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRevealMove();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.player = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.gameIndex = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.revealedMove = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.salt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRevealMove {
    return {
      player: isSet(object.player) ? globalThis.String(object.player) : "",
      gameIndex: isSet(object.gameIndex) ? Long.fromValue(object.gameIndex) : Long.UZERO,
      revealedMove: isSet(object.revealedMove) ? globalThis.String(object.revealedMove) : "",
      salt: isSet(object.salt) ? globalThis.String(object.salt) : "",
    };
  },

  toJSON(message: MsgRevealMove): unknown {
    const obj: any = {};
    if (message.player !== "") {
      obj.player = message.player;
    }
    if (!message.gameIndex.equals(Long.UZERO)) {
      obj.gameIndex = (message.gameIndex || Long.UZERO).toString();
    }
    if (message.revealedMove !== "") {
      obj.revealedMove = message.revealedMove;
    }
    if (message.salt !== "") {
      obj.salt = message.salt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRevealMove>, I>>(base?: I): MsgRevealMove {
    return MsgRevealMove.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRevealMove>, I>>(object: I): MsgRevealMove {
    const message = createBaseMsgRevealMove();
    message.player = object.player ?? "";
    message.gameIndex = (object.gameIndex !== undefined && object.gameIndex !== null)
      ? Long.fromValue(object.gameIndex)
      : Long.UZERO;
    message.revealedMove = object.revealedMove ?? "";
    message.salt = object.salt ?? "";
    return message;
  },
};

function createBaseMsgRevealMoveResponse(): MsgRevealMoveResponse {
  return {};
}

export const MsgRevealMoveResponse = {
  encode(_: MsgRevealMoveResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRevealMoveResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRevealMoveResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRevealMoveResponse {
    return {};
  },

  toJSON(_: MsgRevealMoveResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRevealMoveResponse>, I>>(base?: I): MsgRevealMoveResponse {
    return MsgRevealMoveResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRevealMoveResponse>, I>>(_: I): MsgRevealMoveResponse {
    const message = createBaseMsgRevealMoveResponse();
    return message;
  },
};

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams = {
  encode(message: MsgUpdateParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse = {
  encode(_: MsgUpdateParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

/** Msg defines the module Msg service. */
export interface Msg {
  /** CreateGame creates a game */
  CreateGame(request: MsgCreateGame): Promise<MsgCreateGameResponse>;
  /** MakeMove submit a hashed move to the specified game. */
  MakeMove(request: MsgMakeMove): Promise<MsgMakeMoveResponse>;
  /** RevealMove submit a revealed move to the specified game. */
  RevealMove(request: MsgRevealMove): Promise<MsgRevealMoveResponse>;
  /** UpdateParams updates params of the rps module. */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}

export const MsgServiceName = "lb.rps.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreateGame = this.CreateGame.bind(this);
    this.MakeMove = this.MakeMove.bind(this);
    this.RevealMove = this.RevealMove.bind(this);
    this.UpdateParams = this.UpdateParams.bind(this);
  }
  CreateGame(request: MsgCreateGame): Promise<MsgCreateGameResponse> {
    const data = MsgCreateGame.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateGame", data);
    return promise.then((data) => MsgCreateGameResponse.decode(_m0.Reader.create(data)));
  }

  MakeMove(request: MsgMakeMove): Promise<MsgMakeMoveResponse> {
    const data = MsgMakeMove.encode(request).finish();
    const promise = this.rpc.request(this.service, "MakeMove", data);
    return promise.then((data) => MsgMakeMoveResponse.decode(_m0.Reader.create(data)));
  }

  RevealMove(request: MsgRevealMove): Promise<MsgRevealMoveResponse> {
    const data = MsgRevealMove.encode(request).finish();
    const promise = this.rpc.request(this.service, "RevealMove", data);
    return promise.then((data) => MsgRevealMoveResponse.decode(_m0.Reader.create(data)));
  }

  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
