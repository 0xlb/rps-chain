// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v3.6.1
// source: lb/rps/v1/rps.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "lb.rps.v1";

/** Params defines the parameters of the module. */
export interface Params {
  ttl: Long;
}

/** Game defines the Rock, Paper & Scissors game object */
export interface Game {
  gameNumber: Long;
  playerA: string;
  playerB: string;
  status: string;
  rounds: Long;
  playerAMoves: string[];
  playerBMoves: string[];
  score: Long[];
  expirationHeight: Long;
}

function createBaseParams(): Params {
  return { ttl: Long.UZERO };
}

export const Params = {
  encode(message: Params, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.ttl.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.ttl);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Params {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.ttl = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return { ttl: isSet(object.ttl) ? Long.fromValue(object.ttl) : Long.UZERO };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (!message.ttl.equals(Long.UZERO)) {
      obj.ttl = (message.ttl || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.ttl = (object.ttl !== undefined && object.ttl !== null) ? Long.fromValue(object.ttl) : Long.UZERO;
    return message;
  },
};

function createBaseGame(): Game {
  return {
    gameNumber: Long.UZERO,
    playerA: "",
    playerB: "",
    status: "",
    rounds: Long.UZERO,
    playerAMoves: [],
    playerBMoves: [],
    score: [],
    expirationHeight: Long.UZERO,
  };
}

export const Game = {
  encode(message: Game, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.gameNumber.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.gameNumber);
    }
    if (message.playerA !== "") {
      writer.uint32(18).string(message.playerA);
    }
    if (message.playerB !== "") {
      writer.uint32(26).string(message.playerB);
    }
    if (message.status !== "") {
      writer.uint32(34).string(message.status);
    }
    if (!message.rounds.equals(Long.UZERO)) {
      writer.uint32(40).uint64(message.rounds);
    }
    for (const v of message.playerAMoves) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.playerBMoves) {
      writer.uint32(58).string(v!);
    }
    writer.uint32(66).fork();
    for (const v of message.score) {
      writer.uint64(v);
    }
    writer.ldelim();
    if (!message.expirationHeight.equals(Long.UZERO)) {
      writer.uint32(72).uint64(message.expirationHeight);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Game {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.gameNumber = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.playerA = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.playerB = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.status = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.rounds = reader.uint64() as Long;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.playerAMoves.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.playerBMoves.push(reader.string());
          continue;
        case 8:
          if (tag === 64) {
            message.score.push(reader.uint64() as Long);

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.score.push(reader.uint64() as Long);
            }

            continue;
          }

          break;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.expirationHeight = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Game {
    return {
      gameNumber: isSet(object.gameNumber) ? Long.fromValue(object.gameNumber) : Long.UZERO,
      playerA: isSet(object.playerA) ? globalThis.String(object.playerA) : "",
      playerB: isSet(object.playerB) ? globalThis.String(object.playerB) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      rounds: isSet(object.rounds) ? Long.fromValue(object.rounds) : Long.UZERO,
      playerAMoves: globalThis.Array.isArray(object?.playerAMoves)
        ? object.playerAMoves.map((e: any) => globalThis.String(e))
        : [],
      playerBMoves: globalThis.Array.isArray(object?.playerBMoves)
        ? object.playerBMoves.map((e: any) => globalThis.String(e))
        : [],
      score: globalThis.Array.isArray(object?.score) ? object.score.map((e: any) => Long.fromValue(e)) : [],
      expirationHeight: isSet(object.expirationHeight) ? Long.fromValue(object.expirationHeight) : Long.UZERO,
    };
  },

  toJSON(message: Game): unknown {
    const obj: any = {};
    if (!message.gameNumber.equals(Long.UZERO)) {
      obj.gameNumber = (message.gameNumber || Long.UZERO).toString();
    }
    if (message.playerA !== "") {
      obj.playerA = message.playerA;
    }
    if (message.playerB !== "") {
      obj.playerB = message.playerB;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (!message.rounds.equals(Long.UZERO)) {
      obj.rounds = (message.rounds || Long.UZERO).toString();
    }
    if (message.playerAMoves?.length) {
      obj.playerAMoves = message.playerAMoves;
    }
    if (message.playerBMoves?.length) {
      obj.playerBMoves = message.playerBMoves;
    }
    if (message.score?.length) {
      obj.score = message.score.map((e) => (e || Long.UZERO).toString());
    }
    if (!message.expirationHeight.equals(Long.UZERO)) {
      obj.expirationHeight = (message.expirationHeight || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Game>, I>>(base?: I): Game {
    return Game.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Game>, I>>(object: I): Game {
    const message = createBaseGame();
    message.gameNumber = (object.gameNumber !== undefined && object.gameNumber !== null)
      ? Long.fromValue(object.gameNumber)
      : Long.UZERO;
    message.playerA = object.playerA ?? "";
    message.playerB = object.playerB ?? "";
    message.status = object.status ?? "";
    message.rounds = (object.rounds !== undefined && object.rounds !== null)
      ? Long.fromValue(object.rounds)
      : Long.UZERO;
    message.playerAMoves = object.playerAMoves?.map((e) => e) || [];
    message.playerBMoves = object.playerBMoves?.map((e) => e) || [];
    message.score = object.score?.map((e) => Long.fromValue(e)) || [];
    message.expirationHeight = (object.expirationHeight !== undefined && object.expirationHeight !== null)
      ? Long.fromValue(object.expirationHeight)
      : Long.UZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
