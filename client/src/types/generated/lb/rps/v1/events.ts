// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v3.6.1
// source: lb/rps/v1/events.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "lb.rps.v1";

/** EventCreateGame is an event emitted when a game is created */
export interface EventCreateGame {
  gameNumber: Long;
  playerA: string;
  playerB: string;
}

/** EventMakeMove is an event emitted when a player makes a move */
export interface EventMakeMove {
  gameNumber: Long;
  player: string;
  move: string;
}

/** EventRevealMove is an event emitted when a player makes a move */
export interface EventRevealMove {
  gameNumber: Long;
  player: string;
  revealedMove: string;
}

/** EventEndGame is an event emitted when a game ends */
export interface EventEndGame {
  gameNumber: Long;
  status: string;
}

function createBaseEventCreateGame(): EventCreateGame {
  return { gameNumber: Long.UZERO, playerA: "", playerB: "" };
}

export const EventCreateGame = {
  encode(message: EventCreateGame, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.gameNumber.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.gameNumber);
    }
    if (message.playerA !== "") {
      writer.uint32(18).string(message.playerA);
    }
    if (message.playerB !== "") {
      writer.uint32(26).string(message.playerB);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventCreateGame {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCreateGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.gameNumber = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.playerA = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.playerB = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventCreateGame {
    return {
      gameNumber: isSet(object.gameNumber) ? Long.fromValue(object.gameNumber) : Long.UZERO,
      playerA: isSet(object.playerA) ? globalThis.String(object.playerA) : "",
      playerB: isSet(object.playerB) ? globalThis.String(object.playerB) : "",
    };
  },

  toJSON(message: EventCreateGame): unknown {
    const obj: any = {};
    if (!message.gameNumber.equals(Long.UZERO)) {
      obj.gameNumber = (message.gameNumber || Long.UZERO).toString();
    }
    if (message.playerA !== "") {
      obj.playerA = message.playerA;
    }
    if (message.playerB !== "") {
      obj.playerB = message.playerB;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventCreateGame>, I>>(base?: I): EventCreateGame {
    return EventCreateGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventCreateGame>, I>>(object: I): EventCreateGame {
    const message = createBaseEventCreateGame();
    message.gameNumber = (object.gameNumber !== undefined && object.gameNumber !== null)
      ? Long.fromValue(object.gameNumber)
      : Long.UZERO;
    message.playerA = object.playerA ?? "";
    message.playerB = object.playerB ?? "";
    return message;
  },
};

function createBaseEventMakeMove(): EventMakeMove {
  return { gameNumber: Long.UZERO, player: "", move: "" };
}

export const EventMakeMove = {
  encode(message: EventMakeMove, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.gameNumber.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.gameNumber);
    }
    if (message.player !== "") {
      writer.uint32(18).string(message.player);
    }
    if (message.move !== "") {
      writer.uint32(26).string(message.move);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventMakeMove {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventMakeMove();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.gameNumber = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.player = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.move = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventMakeMove {
    return {
      gameNumber: isSet(object.gameNumber) ? Long.fromValue(object.gameNumber) : Long.UZERO,
      player: isSet(object.player) ? globalThis.String(object.player) : "",
      move: isSet(object.move) ? globalThis.String(object.move) : "",
    };
  },

  toJSON(message: EventMakeMove): unknown {
    const obj: any = {};
    if (!message.gameNumber.equals(Long.UZERO)) {
      obj.gameNumber = (message.gameNumber || Long.UZERO).toString();
    }
    if (message.player !== "") {
      obj.player = message.player;
    }
    if (message.move !== "") {
      obj.move = message.move;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventMakeMove>, I>>(base?: I): EventMakeMove {
    return EventMakeMove.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventMakeMove>, I>>(object: I): EventMakeMove {
    const message = createBaseEventMakeMove();
    message.gameNumber = (object.gameNumber !== undefined && object.gameNumber !== null)
      ? Long.fromValue(object.gameNumber)
      : Long.UZERO;
    message.player = object.player ?? "";
    message.move = object.move ?? "";
    return message;
  },
};

function createBaseEventRevealMove(): EventRevealMove {
  return { gameNumber: Long.UZERO, player: "", revealedMove: "" };
}

export const EventRevealMove = {
  encode(message: EventRevealMove, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.gameNumber.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.gameNumber);
    }
    if (message.player !== "") {
      writer.uint32(18).string(message.player);
    }
    if (message.revealedMove !== "") {
      writer.uint32(26).string(message.revealedMove);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventRevealMove {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventRevealMove();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.gameNumber = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.player = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.revealedMove = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventRevealMove {
    return {
      gameNumber: isSet(object.gameNumber) ? Long.fromValue(object.gameNumber) : Long.UZERO,
      player: isSet(object.player) ? globalThis.String(object.player) : "",
      revealedMove: isSet(object.revealedMove) ? globalThis.String(object.revealedMove) : "",
    };
  },

  toJSON(message: EventRevealMove): unknown {
    const obj: any = {};
    if (!message.gameNumber.equals(Long.UZERO)) {
      obj.gameNumber = (message.gameNumber || Long.UZERO).toString();
    }
    if (message.player !== "") {
      obj.player = message.player;
    }
    if (message.revealedMove !== "") {
      obj.revealedMove = message.revealedMove;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventRevealMove>, I>>(base?: I): EventRevealMove {
    return EventRevealMove.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventRevealMove>, I>>(object: I): EventRevealMove {
    const message = createBaseEventRevealMove();
    message.gameNumber = (object.gameNumber !== undefined && object.gameNumber !== null)
      ? Long.fromValue(object.gameNumber)
      : Long.UZERO;
    message.player = object.player ?? "";
    message.revealedMove = object.revealedMove ?? "";
    return message;
  },
};

function createBaseEventEndGame(): EventEndGame {
  return { gameNumber: Long.UZERO, status: "" };
}

export const EventEndGame = {
  encode(message: EventEndGame, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.gameNumber.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.gameNumber);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventEndGame {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventEndGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.gameNumber = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventEndGame {
    return {
      gameNumber: isSet(object.gameNumber) ? Long.fromValue(object.gameNumber) : Long.UZERO,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: EventEndGame): unknown {
    const obj: any = {};
    if (!message.gameNumber.equals(Long.UZERO)) {
      obj.gameNumber = (message.gameNumber || Long.UZERO).toString();
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventEndGame>, I>>(base?: I): EventEndGame {
    return EventEndGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventEndGame>, I>>(object: I): EventEndGame {
    const message = createBaseEventEndGame();
    message.gameNumber = (object.gameNumber !== undefined && object.gameNumber !== null)
      ? Long.fromValue(object.gameNumber)
      : Long.UZERO;
    message.status = object.status ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
